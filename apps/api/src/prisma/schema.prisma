// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BaseUser {
  base_user_id      String   @id @default(uuid()) @db.Uuid
  user_email        String   @unique @db.VarChar(250)
  is_email_verified Boolean  @default(false)
  is_admin_user     Boolean  @default(false)
  is_deleted        Boolean  @default(false)
  username          String   @db.VarChar(250)
  user_password     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  members           Member[]

  @@map("base_user")
}

model Member {
  member_id      String   @id @default(uuid()) @db.Uuid
  reputation     Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  member_base_id String   @db.Uuid

  baseUser     BaseUser      @relation(fields: [member_base_id], references: [base_user_id], onDelete: Cascade, onUpdate: Cascade)
  posts        Post[]
  postVotes    PostVote[]
  comments     Comment[]
  commentVotes CommentVote[]

  @@map("member")
}

model Post {
  post_id            String   @id @default(uuid()) @db.Uuid
  type               String   @db.VarChar(30)
  title              String?  @db.Text
  text               String?  @db.Text
  link               String?  @db.Text
  slug               String   @db.VarChar(300)
  points             Int      @default(0)
  total_num_comments Int      @default(0)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  member_id          String   @db.Uuid

  member    Member     @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: Cascade)
  postVotes PostVote[]
  comments  Comment[]

  @@map("post")
}

model PostVote {
  post_vote_id String   @id @default(uuid()) @db.Uuid
  type         String   @db.VarChar(10)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  post_id      String   @db.Uuid
  member_id    String   @db.Uuid

  post   Post   @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: Cascade)
  member Member @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("post_vote")
}

model Comment {
  comment_id        String   @id @default(uuid()) @db.Uuid
  text              String   @db.Text
  points            Int      @default(1)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  member_id         String   @db.Uuid
  post_id           String   @db.Uuid
  parent_comment_id String?  @db.Uuid

  member        Member        @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: Cascade)
  post          Post          @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: Cascade)
  commentVotes  CommentVote[]
  parentComment Comment?      @relation("ParentChildren", fields: [parent_comment_id], references: [comment_id])
  childComments Comment[]     @relation("ParentChildren")

  @@map("comment")
}

model CommentVote {
  comment_vote_id String   @id @default(uuid()) @db.Uuid
  type            String   @db.VarChar(10)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  comment_id      String   @db.Uuid
  member_id       String   @db.Uuid

  member  Member  @relation(fields: [member_id], references: [member_id], onDelete: Cascade, onUpdate: Cascade)
  comment Comment @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("comment_vote")
}
